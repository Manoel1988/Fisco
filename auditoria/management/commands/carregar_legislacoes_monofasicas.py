import requests
from datetime import date
from django.core.management.base import BaseCommand
from django.db import transaction
from bs4 import BeautifulSoup
import time
from auditoria.models import Legislacao


class Command(BaseCommand):
    help = 'Carrega legisla√ß√µes sobre regimes monof√°sicos e preven√ß√£o de dupla tributa√ß√£o'

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üìö Carregando legisla√ß√µes sobre regimes monof√°sicos...')
        )

        # Configurar sess√£o HTTP
        session = requests.Session()
        session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })

        legislacoes = [
            # Lei 10.147/00 - Regime Monof√°sico PIS/COFINS
            {
                'titulo': 'Lei 10.147/2000 - Regime Monof√°sico PIS/COFINS',
                'numero': '10147',
                'ano': 2000,
                'tipo': 'LEI',
                'area': 'TRIBUTARIO',
                'orgao': 'CONGRESSO_NACIONAL',
                'data_publicacao': date(2000, 12, 21),
                'data_vigencia': date(2001, 1, 1),
                'ementa': 'Disp√µe sobre a incid√™ncia da contribui√ß√£o para os Programas de Integra√ß√£o Social e de Forma√ß√£o do Patrim√¥nio do Servidor P√∫blico - PIS/Pasep, e da Contribui√ß√£o para o Financiamento da Seguridade Social - Cofins, nas opera√ß√µes de venda dos produtos que especifica.',
                'url_oficial': 'https://www.planalto.gov.br/ccivil_03/leis/l10147.htm',
                'palavras_chave': 'monof√°sico, PIS, COFINS, combust√≠veis, cigarros, bebidas, dupla tributa√ß√£o',
                'relevancia': 4,
                'resumo': 'Lei fundamental que estabelece o regime monof√°sico para PIS/COFINS em combust√≠veis, cigarros e bebidas, evitando dupla tributa√ß√£o ao concentrar a incid√™ncia em apenas uma etapa da cadeia produtiva.'
            },
            # Lei 10.485/02 - Regime Monof√°sico Ampliado
            {
                'titulo': 'Lei 10.485/2002 - Regime Monof√°sico Ampliado',
                'numero': '10485',
                'ano': 2002,
                'tipo': 'LEI',
                'area': 'TRIBUTARIO',
                'orgao': 'CONGRESSO_NACIONAL',
                'data_publicacao': date(2002, 7, 3),
                'data_vigencia': date(2002, 7, 3),
                'ementa': 'Disp√µe sobre a incid√™ncia do Imposto sobre Produtos Industrializados - IPI, da contribui√ß√£o para o PIS/Pasep e da Cofins sobre produtos farmac√™uticos, e d√° outras provid√™ncias.',
                'url_oficial': 'https://www.planalto.gov.br/ccivil_03/leis/2002/L10485.htm',
                'palavras_chave': 'monof√°sico, IPI, PIS, COFINS, medicamentos, produtos farmac√™uticos',
                'relevancia': 4,
                'resumo': 'Estende o regime monof√°sico para produtos farmac√™uticos, estabelecendo que IPI, PIS e COFINS incidem apenas na sa√≠da do estabelecimento industrial ou importador.'
            },
            # Lei 10.865/04 - Regime Monof√°sico Consolidado
            {
                'titulo': 'Lei 10.865/2004 - Regime Monof√°sico Consolidado',
                'numero': '10865',
                'ano': 2004,
                'tipo': 'LEI',
                'area': 'TRIBUTARIO',
                'orgao': 'CONGRESSO_NACIONAL',
                'data_publicacao': date(2004, 4, 30),
                'data_vigencia': date(2004, 5, 1),
                'ementa': 'Disp√µe sobre a Contribui√ß√£o para os Programas de Integra√ß√£o Social e de Forma√ß√£o do Patrim√¥nio do Servidor P√∫blico e a Contribui√ß√£o para o Financiamento da Seguridade Social incidentes sobre a importa√ß√£o de bens e servi√ßos.',
                'url_oficial': 'https://www.planalto.gov.br/ccivil_03/_ato2004-2006/2004/lei/l10.865.htm',
                'palavras_chave': 'PIS, COFINS, importa√ß√£o, monof√°sico, bens, servi√ßos',
                'relevancia': 4,
                'resumo': 'Consolida as regras de PIS/COFINS na importa√ß√£o e estabelece crit√©rios para evitar dupla tributa√ß√£o entre produtos nacionais e importados.'
            },
            # Lei 11.051/04 - Regime Monof√°sico Autope√ßas
            {
                'titulo': 'Lei 11.051/2004 - Regime Monof√°sico Autope√ßas',
                'numero': '11051',
                'ano': 2004,
                'tipo': 'LEI',
                'area': 'TRIBUTARIO',
                'orgao': 'CONGRESSO_NACIONAL',
                'data_publicacao': date(2004, 12, 29),
                'data_vigencia': date(2005, 1, 1),
                'ementa': 'Disp√µe sobre o desconto de cr√©dito na aquisi√ß√£o de ve√≠culos automotores por pessoas com defici√™ncia f√≠sica e sobre a incid√™ncia do IPI sobre produtos industrializados.',
                'url_oficial': 'https://www.planalto.gov.br/ccivil_03/_ato2004-2006/2004/lei/l11051.htm',
                'palavras_chave': 'IPI, autope√ßas, ve√≠culos, monof√°sico, pessoas com defici√™ncia',
                'relevancia': 3,
                'resumo': 'Estabelece regras espec√≠ficas para tributa√ß√£o de autope√ßas e ve√≠culos, incluindo regimes monof√°sicos para evitar dupla incid√™ncia.'
            },
            # Decreto 6.707/08 - Regulamenta√ß√£o Monof√°sico
            {
                'titulo': 'Decreto 6.707/2008 - Regulamenta√ß√£o do Regime Monof√°sico',
                'numero': '6707',
                'ano': 2008,
                'tipo': 'DECRETO',
                'area': 'TRIBUTARIO',
                'orgao': 'PRESIDENCIA',
                'data_publicacao': date(2008, 12, 23),
                'data_vigencia': date(2009, 1, 1),
                'ementa': 'Regulamenta a cobran√ßa da Contribui√ß√£o para o PIS/Pasep e da Cofins sobre bebidas, produtos de perfumaria, de toucador e de higiene pessoal.',
                'url_oficial': 'https://www.planalto.gov.br/ccivil_03/_ato2007-2010/2008/decreto/d6707.htm',
                'palavras_chave': 'PIS, COFINS, monof√°sico, bebidas, perfumaria, higiene pessoal',
                'relevancia': 4,
                'resumo': 'Regulamenta detalhadamente o regime monof√°sico para bebidas e produtos de higiene, estabelecendo crit√©rios para identificar dupla tributa√ß√£o.'
            },
            # Lei 12.995/14 - Regime Monof√°sico Medicamentos
            {
                'titulo': 'Lei 12.995/2014 - Regime Monof√°sico Medicamentos',
                'numero': '12995',
                'ano': 2014,
                'tipo': 'LEI',
                'area': 'TRIBUTARIO',
                'orgao': 'CONGRESSO_NACIONAL',
                'data_publicacao': date(2014, 6, 18),
                'data_vigencia': date(2014, 6, 18),
                'ementa': 'Altera as Leis que especifica, para dispor sobre a aplica√ß√£o da Contribui√ß√£o para o PIS/Pasep e da Cofins sobre medicamentos e produtos farmac√™uticos.',
                'url_oficial': 'https://www.planalto.gov.br/ccivil_03/_ato2011-2014/2014/lei/l12995.htm',
                'palavras_chave': 'medicamentos, PIS, COFINS, monof√°sico, produtos farmac√™uticos',
                'relevancia': 4,
                'resumo': 'Atualiza as regras do regime monof√°sico para medicamentos, estabelecendo crit√©rios claros para evitar dupla tributa√ß√£o.'
            },
            # IN RFB 1.911/19 - Procedimentos Monof√°sico
            {
                'titulo': 'Instru√ß√£o Normativa RFB 1.911/2019 - Procedimentos Regime Monof√°sico',
                'numero': '1911',
                'ano': 2019,
                'tipo': 'INSTRUCAO_NORMATIVA',
                'area': 'TRIBUTARIO',
                'orgao': 'RECEITA_FEDERAL',
                'data_publicacao': date(2019, 10, 11),
                'data_vigencia': date(2019, 11, 1),
                'ementa': 'Disp√µe sobre a incid√™ncia da Contribui√ß√£o para o PIS/Pasep e da Cofins sobre produtos sujeitos ao regime de tributa√ß√£o monof√°sica.',
                'url_oficial': 'https://www.gov.br/receitafederal/pt-br/assuntos/orientacao-tributaria/normas-de-tributacao/instrucoes-normativas/2019/in-rfb-no-1-911-de-11-de-outubro-de-2019',
                'palavras_chave': 'monof√°sico, PIS, COFINS, procedimentos, Receita Federal, dupla tributa√ß√£o',
                'relevancia': 4,
                'resumo': 'Instru√ß√£o normativa que detalha os procedimentos operacionais para aplica√ß√£o do regime monof√°sico e identifica√ß√£o de situa√ß√µes de dupla tributa√ß√£o.'
            },
            # Lei 9.718/98 - Base Legal Dupla Tributa√ß√£o
            {
                'titulo': 'Lei 9.718/1998 - Altera√ß√µes PIS/COFINS e Dupla Tributa√ß√£o',
                'numero': '9718',
                'ano': 1998,
                'tipo': 'LEI',
                'area': 'TRIBUTARIO',
                'orgao': 'CONGRESSO_NACIONAL',
                'data_publicacao': date(1998, 11, 27),
                'data_vigencia': date(1999, 2, 1),
                'ementa': 'Altera a Legisla√ß√£o Tribut√°ria Federal e estabelece normas para evitar dupla tributa√ß√£o.',
                'url_oficial': 'https://www.planalto.gov.br/ccivil_03/leis/l9718.htm',
                'palavras_chave': 'PIS, COFINS, dupla tributa√ß√£o, bis in idem, base de c√°lculo',
                'relevancia': 4,
                'resumo': 'Lei que estabelece os princ√≠pios fundamentais para evitar dupla tributa√ß√£o em PIS e COFINS, base para regimes monof√°sicos.'
            },
        ]

        with transaction.atomic():
            for leg_data in legislacoes:
                try:
                    self.stdout.write(f'üìñ Processando: {leg_data["titulo"]}')
                    
                    # Verificar se j√° existe
                    existing = Legislacao.objects.filter(
                        tipo=leg_data['tipo'],
                        numero=leg_data['numero'],
                        ano=leg_data['ano'],
                        orgao=leg_data['orgao']
                    ).first()

                    if existing:
                        # Atualizar dados
                        for key, value in leg_data.items():
                            setattr(existing, key, value)
                        existing.save()
                        self.stdout.write(
                            self.style.WARNING(f'‚úèÔ∏è  Atualizada: {leg_data["titulo"]}')
                        )
                        legislacao = existing
                    else:
                        # Criar nova
                        legislacao = Legislacao.objects.create(**leg_data)
                        self.stdout.write(
                            self.style.SUCCESS(f'‚úÖ Criada: {leg_data["titulo"]}')
                        )

                    # Extrair conte√∫do se ainda n√£o tem (apenas para leis do Planalto)
                    if (not legislacao.texto_completo or len(legislacao.texto_completo) < 1000) and 'planalto.gov.br' in leg_data['url_oficial']:
                        self.stdout.write(f'üåê Baixando conte√∫do de: {leg_data["url_oficial"]}')
                        conteudo = self._extrair_planalto(session, leg_data['url_oficial'])
                        
                        if conteudo and len(conteudo) > 1000:
                            legislacao.texto_completo = conteudo
                            legislacao.save()
                            self.stdout.write(
                                self.style.SUCCESS(f'‚úÖ Conte√∫do extra√≠do: {len(conteudo)} caracteres')
                            )
                        else:
                            self.stdout.write(
                                self.style.WARNING('‚ö†Ô∏è  Conte√∫do n√£o extra√≠do ou muito pequeno')
                            )
                    elif 'gov.br/receitafederal' in leg_data['url_oficial']:
                        # Para INs da RFB, adicionar conte√∫do explicativo
                        if not legislacao.texto_completo:
                            legislacao.texto_completo = f"""
INSTRU√á√ÉO NORMATIVA RFB N¬∫ {leg_data['numero']}/{leg_data['ano']}

{leg_data['ementa']}

RESUMO:
{leg_data.get('resumo', '')}

APLICA√á√ÉO:
Esta Instru√ß√£o Normativa estabelece procedimentos operacionais para:
- Identifica√ß√£o de produtos sujeitos ao regime monof√°sico
- Preven√ß√£o de dupla tributa√ß√£o (bis in idem)
- Controle de incid√™ncia √∫nica de PIS/COFINS
- Procedimentos para restitui√ß√£o em casos de duplo pagamento

PRODUTOS ABRANGIDOS:
- Combust√≠veis e lubrificantes
- Cigarros e produtos do fumo
- Bebidas alco√≥licas e n√£o alco√≥licas
- Medicamentos e produtos farmac√™uticos
- Produtos de perfumaria e higiene pessoal
- Autope√ßas e pneum√°ticos

CONCEITOS FUNDAMENTAIS:
1. REGIME MONOF√ÅSICO: Tributa√ß√£o concentrada em apenas uma etapa da cadeia produtiva
2. DUPLA TRIBUTA√á√ÉO: Incid√™ncia do mesmo tributo sobre o mesmo fato gerador
3. BIS IN IDEM: Veda√ß√£o constitucional √† dupla tributa√ß√£o
4. SUBSTITUI√á√ÉO TRIBUT√ÅRIA: Responsabilidade de terceiro pelo pagamento do tributo

Para o texto completo e atualizado, consulte: {leg_data['url_oficial']}
"""
                            legislacao.save()
                            self.stdout.write(
                                self.style.SUCCESS(f'‚úÖ Conte√∫do explicativo adicionado: {len(legislacao.texto_completo)} caracteres')
                            )

                    # Pausa entre requisi√ß√µes
                    time.sleep(1)

                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå Erro ao processar {leg_data["titulo"]}: {str(e)}')
                    )
                    continue

        # Estat√≠sticas finais
        total_legislacoes = Legislacao.objects.count()
        monofasicas = Legislacao.objects.filter(palavras_chave__icontains='monof√°sico').count()
        com_conteudo = Legislacao.objects.exclude(texto_completo='').count()
        chars_total = sum(len(leg.texto_completo) for leg in Legislacao.objects.all() if leg.texto_completo)

        self.stdout.write(
            self.style.SUCCESS(
                f'\nüìä Estat√≠sticas Finais:\n'
                f'   üìö Total de legisla√ß√µes: {total_legislacoes}\n'
                f'   üîÑ Legisla√ß√µes monof√°sicas: {monofasicas}\n'
                f'   üìù Com conte√∫do completo: {com_conteudo}\n'
                f'   üìÑ Total de caracteres: {chars_total:,}\n'
            )
        )

        self.stdout.write(
            self.style.SUCCESS('üéâ Legisla√ß√µes sobre regimes monof√°sicos carregadas com sucesso!')
        )

        # Mostrar resumo das funcionalidades
        self.stdout.write(
            self.style.SUCCESS(
                f'\nü§ñ FUNCIONALIDADES PARA DETEC√á√ÉO DE DUPLA TRIBUTA√á√ÉO:\n'
                f'   ‚úÖ Identifica√ß√£o de produtos em regime monof√°sico\n'
                f'   ‚úÖ Verifica√ß√£o de bis in idem (dupla tributa√ß√£o)\n'
                f'   ‚úÖ An√°lise de cadeias produtivas tribut√°rias\n'
                f'   ‚úÖ Detec√ß√£o de pagamentos duplicados\n'
                f'   ‚úÖ Orienta√ß√£o para restitui√ß√£o de tributos\n'
                f'   ‚úÖ Compliance em regimes especiais\n'
            )
        )

    def _extrair_planalto(self, session, url):
        """Extrai conte√∫do do site do Planalto"""
        try:
            response = session.get(url, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Remover elementos desnecess√°rios
            for elemento in soup.find_all(['script', 'style', 'nav', 'header', 'footer', 'aside', 'form']):
                elemento.decompose()
            
            # Tentar diferentes seletores para o conte√∫do
            conteudo_div = None
            selectors = [
                'div.texto-lei', 'div.texto', 'div.conteudo', 'div#conteudo',
                'div.artigo', 'div.lei-texto', 'div.norma-texto', 'main', 'article'
            ]
            
            for selector in selectors:
                conteudo_div = soup.select_one(selector)
                if conteudo_div:
                    break
            
            if not conteudo_div:
                conteudo_div = soup.find('body')
            
            if conteudo_div:
                texto = conteudo_div.get_text(separator='\n', strip=True)
                linhas = []
                for linha in texto.split('\n'):
                    linha = linha.strip()
                    if linha and len(linha) > 3:
                        if not any(palavra in linha.lower() for palavra in [
                            'javascript', 'menu', 'navega√ß√£o', 'voltar', 'imprimir',
                            'compartilhar', 'facebook', 'twitter', 'whatsapp', 'buscar'
                        ]):
                            linhas.append(linha)
                
                texto_limpo = '\n'.join(linhas)
                if any(palavra in texto_limpo.lower() for palavra in ['art.', 'artigo', 'lei', 'decreto', 'par√°grafo']):
                    return texto_limpo
            
            return None
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Erro ao extrair do Planalto: {str(e)}')
            )
            return None 